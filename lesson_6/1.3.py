# Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых трех уроков.
# Проанализировать результат и определить программы с наиболее эффективным использованием памяти.
#
# Примечание: Для анализа возьмите любые 1-3 ваших программы или несколько вариантов кода для одной и той же задачи.
# Результаты анализа вставьте в виде комментариев к коду. Также укажите в комментариях версию Python и разрядность вашей ОС.

from memory_profiler import profile


@profile()
def function():
    n = 6
    count = 0
    summ = 0
    count_num = 1
    while count < n:
        summ += count_num
        count += 1
        count_num = count_num / (-2)


# рекурсия

@profile()
def recursion(c, n, s):
    if c == 0:
        return s
    else:
        c -= 1
        s += n
        n = n / (-2)
        return recursion(c, n, s)


if __name__ == '__main__':
    function()
    recursion(6, 1, 0)

# Python 3.7
# 64x
# использовано 10.6 MiB памяти для решения через цикл, количество памяти не увеличивалось в течении действия программы (ПОБЕДИТЕЛЬ!)
# использовано 10.7 MiB памяти для решения через рекурсию, количество памяти не увеличивалось в течении действия программы.
# можно отметить что при решении через рекурсию цикл расчета прогонялся 7 раз, однако это не повлияло на увеличение объема памяти
